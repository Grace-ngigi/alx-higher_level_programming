The ``2-matrix_divided`` module
===============================

using ``matrix_divided``
-----------------------

matrix_divided divides all elements of a matrix
provided that:
matrix is a list of integers or floats
each row of the matrix is the same size
div argument is either a float or an integer
div argument is not 0
all elements are divided by div and rounded to two decimal places
returns a new matrix

Usage:
======

Import the ``matrix_divided`` from ``2-matrix_divided``
    >>> matrix_divided = __import__("2-matrix_divided").matrix_divided

Test for success with integers:
    >>> matrix= [[1, 2, 3], [4, 5, 6]]  
    >>> matrix_divided(matrix, 3)       
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Test for success with floats:
    >>> matrix= [[1.9876, 2.234, 3.7654], [4.5678, 5.7654, 6.56678]] 
    >>> matrix_divided(matrix, 1) 
    [[1.99, 2.23, 3.77], [4.57, 5.77, 6.57]]
    
Test for success with both integers and floats:
    >>> matrix= [[1.9876, 2.234, 3], [4.5678, 5.7654, 6]]            
    >>> matrix_divided(matrix, 1)
    [[1.99, 2.23, 3.0], [4.57, 5.77, 6.0]]

Test if div is zero:
    >>> matrix_divided(matrix, 0)       
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

Test if div is float or integer:
    >>> matrix_divided(matrix, True) 
    Traceback (most recent call last):
    TypeError: div must be a number

Test matrix with a string:
    >>> matrix= [[1, 2, 3], [4, 5, '6']]
    >>> matrix_divided(matrix, 1)        
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test matrix with different row lengths:
    >>> matrix= [[1, 2, 3], [4, 5]]      
    >>> matrix_divided(matrix, 1)   
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

Test with an empty matrix:
    >>> matrix= []                
    >>> matrix_divided(matrix, 1)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats
